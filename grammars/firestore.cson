# Firestore Rules Syntax: version 1.1
scopeName: "source.firestore"
name: "Firestore Rules"
fileTypes: [
	"rule"
	"rules"
]
firstLineMatch: "^service\\s+cloud\\.firestore\\s+{"
foldingStartMarker: "^{\\s*$"
foldingStopMarker:  "^\\s*}"
patterns: [include: "#main"]
repository:
	main:
		patterns: [
			{include: "#number"}
			{include: "#comment"}
			{include: "#basicTypes"}
			{include: "#strings"}
			{include: "#functionName"}
			{include: "#functionParameterList"}
			{include: "#pathMatchLiteral"}
			{include: "#pathMatchVariable"}
			{include: "#globalFunc"}
			{include: "#accessControl"}
			{include: "#keywords"}
			{include: "#booleans"}
			{include: "#otherKeywords"}
			{include: "#comparisons"}
			{include: "#typeMember"}
			{include: "#punctuation"}
		]

	accessControl:
		match: "\\s(get|list|read|create|update|delete|write)([,:;])"
		captures:
			1: name: "storage.modifier.access-control.firestore"
			2: name: "punctuation.separator.access-control.firestore"

	basicTypes:
		name: "storage.type.$1.firestore"
		match: "\\b(request|math|user|duration|string|int|cloud)\\b"

	booleans:
		name: "constant.language.boolean.$1.firestore"
		match: "\\b(true|false)\\b"

	comment:
		name:  "comment.line.double-slash.firestore"
		begin: "//"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.firestore"

	comparisons:
		name: "keyword.operator.comparison.firestore"
		match: "[=!><|&]"

	functionName:
		name: "entity.name.function.firestore"
		match: "([.\\s\\(])[a-zA-Z]+(?=\\()"
		captures:
			1: name: "punctuation.definition.function.firestore"
	
	functionParameterList:
		name:  "meta.function.parameters.firestore"
		begin: "\\("
		end:   "\\)"
		beginCaptures: 0: name: "punctuation.definition.parameters.begin.bracket.round.firestore"
		endCaptures:   0: name: "punctuation.definition.parameters.end.bracket.round.firestore"
		patterns: [
			{include: "#functionParameter"}
			{include: "#strings"}
			{include: "#punctuation"}
		]

	functionParameter:
		name: "variable.parameter.function.firestore"
		match: "\\b(?<!['\"])[a-zA-Z0-9_]+(?!['\"])\\b"

	# Global functions without parentheses
	globalFunc:
		name: "support.function.global.$1.firestore"
		match: "^\\s*(service|match|allow)(?=\\s)"

	keywords:
		name: "keyword.control.$1.firestore"
		match: "\\b(if|return|is)\\b"

	number:
		name: "constant.numeric.decimal.integer.firestore"
		match: "\\b(\\d+)\\b"
	
	otherKeywords:
		patterns: [{
			name: "constant.language.null.firestore"
			match: "\\b(null)\\b"
		},{
			name: "keyword.operator.in.firestore"
			match: "\\b(in)\\b"
		},{
			name: "storage.type.function.firestore"
			match: "\\b(function)\\b"
		}]

	pathMatchLiteral:
		match: "/([a-zA-Z0-9_]+)(?=[\\s/])"
		captures:
			1: name: "string.unquoted.path-match.firestore"

	pathMatchVariable:
		match: "\\/({[^}]+})(?=[\\s\\/])"
		captures:
			1: name: "variable.parameter.path-match.firestore"

	punctuation:
		patterns: [
			{match: ";",   name: "punctuation.terminator.statement.semicolon.firestore"}
			{match: ",",   name: "punctuation.separator.delimiter.comma.firestore"}
			{match: "{",   name: "punctuation.definition.bracket.curly.begin.firestore"}
			{match: "}",   name: "punctuation.definition.bracket.curly.end.firestore"}
			{match: "\\[", name: "punctuation.definition.bracket.square.begin.firestore"}
			{match: "\\]", name: "punctuation.definition.bracket.square.end.firestore"}
			{match: "\\(", name: "punctuation.definition.bracket.round.begin.firestore"}
			{match: "\\)", name: "punctuation.definition.bracket.round.end.firestore"}
		]
	
	strings:
		patterns: [{
			name: "string.quoted.double.firestore"
			begin: '"'
			end:   '"'
			beginCaptures: 0: name: "punctuation.definition.string.begin.firestore"
			endCaptures:   0: name: "punctuation.definition.string.end.firestore"
		},{
			name: "string.quoted.single.firestore"
			begin: "'"
			end:   "'"
			beginCaptures: 0: name: "punctuation.definition.string.begin.firestore"
			endCaptures:   0: name: "punctuation.definition.string.end.firestore"
		}]

	typeMember:
		name: "variable.parameter.type.member.firestore"
		match: "(\\.)[a-zA-Z0-9_]+"
		captures:
			1: name: "punctuation.definition.variable.full-stop.dot.period.firestore"
